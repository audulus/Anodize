//  This file is generated by Anodize. DO NOT EDIT.
import Metal
import AnodizeUtil
import simd
class MyCoolKernel {
    private var pipeline: MTLComputePipelineState
    init(device: MTLDevice) { self.pipeline = device.makeComputePipeline(name: "MyCoolKernel") }
    func begin(_ buf: MTLCommandBuffer) throws -> BindingWrapper {
        guard let enc = buf.makeComputeCommandEncoder() else { throw AnodizeError.metalError("couldn't create MTLComputeCommandEncoder") }
        enc.label = "MyCoolKernel"
        enc.setComputePipelineState(pipeline)
        return .init(enc: enc)
    }
    struct BindingWrapper {
        let enc: MTLComputeCommandEncoder
        func bind_buffer(_ buffer: MTLBuffer) -> Self {
            enc.setBuffer(buffer, index: 0)
            return self
        }
        func buffer(_ array: any MutableGPUBufferProvider<Float>) -> Self {
            enc.setBuffer(array, index: 0)
            return self
        }
        func bind_value(_ buffer: MTLBuffer) -> Self {
            enc.setBuffer(buffer, index: 1)
            return self
        }
        func value(bytes value: Float) -> Self {
            enc.setBytes(value, index: 1)
            return self
        }
        func value(_ array: any GPUBufferProvider<Float>) -> Self {
            enc.setBuffer(array, index: 1)
            return self
        }
        func wait(_ fence: MTLFence) -> Self {
            enc.waitForFence(fence)
            return self
        }
        func update(_ fence: MTLFence) -> Self {
            enc.updateFence(fence)
            return self
        }
        func dispatch(threadgroups: MTLSize, threadsPerThreadgroup: MTLSize) -> Self {
            enc.dispatchThreadgroups(threadgroups, threadsPerThreadgroup: threadsPerThreadgroup)
            return self
        }
        func dispatch(threadgroups: Int, threadsPerThreadgroup: Int) -> Self {
            enc.dispatchThreadgroups(MTLSizeMake(threadgroups, 1, 1), threadsPerThreadgroup: MTLSizeMake(threadsPerThreadgroup, 1, 1))
            return self
        }
        func dispatch(threads: Int, threadsPerThreadgroup: Int) -> Self {
            enc.dispatchThreadgroups(MTLSizeMake(Int(ceil(Double(threads)/Double(threadsPerThreadgroup))), 1, 1), threadsPerThreadgroup: MTLSizeMake(threadsPerThreadgroup, 1, 1))
            return self
        }
        func end() { enc.endEncoding() } 
    }
}
